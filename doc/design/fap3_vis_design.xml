<?xml version="1.0" ?>

<!DOCTYPE article SYSTEM "/usr/share/sgml/docbook/dtd/xml/4.5/docbookx.dtd">


<article status="draft" class="specification"> <title>Enhanced Discrete Events System visualization module ver 3. Design.</title>

    <articleinfo>
	<author><personname><firstname>Yuri</firstname><surname>Borisov</surname></personname>
	    <email>yuri.borisov.v@gmail.com</email></author> 

	<releaseinfo>Ver.0.01 at 11-Dec-2021</releaseinfo>

	<abstract>
	    <simpara>This document collects software desing for Discrete Events System visualization module ver 3.</simpara>
	</abstract>

	<revhistory>
	    <revision> <revnumber>0.01</revnumber> <date>11-Dec-2021</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Initial version</revremark> </revision>
	</revhistory>

    </articleinfo>

    <bibliolist><title>References</title>
	<biblioentry id="ref_glfw3_dcm"> <abbrev>GLFW3_DCM</abbrev>
	    <productname><ulink url="https://www.glfw.org/docs/3.3/index.html"/></productname>
	    <title>GLFW documentation</title> </biblioentry>
	<biblioentry id="ref_ftgl_dcm"> <abbrev>FTGL_DCM</abbrev>
	    <productname><ulink url="http://ftgl.sourceforge.net/docs/html/index.html"/></productname>
	    <title><xref linkend="gls_ftgl"/> documentation</title> </biblioentry>
    </bibliolist>


    <glossary> <title>Glossary</title> 
	<glossentry id="gls_avr"><glossterm>AVR</glossterm>
	    <glossdef>
		<para>Agents Visual Representation, feature of representing some system agents in visual terms,
		    It can be used for applications visualizing the systems, Models studios etc.</para>
	    </glossdef>
	</glossentry>
	<glossentry id="gls_drp"><glossterm>DRP</glossterm>
	    <glossdef>
		<para>Detailing Representation, visual model representing some agent in details.
		    Part of <xref linkend="gls_avr"/> architecture</para>
	    </glossdef>
	</glossentry>
	<glossentry id="gls_crp"><glossterm>CRP</glossterm>
	    <glossdef>
		<para>Compact Representation, visual model representing some agent in compact manner.
		    Usially is applied witin <xref linkend="gls_drp"/>. Part of <xref linkend="gls_avr"/> architecture</para>
	    </glossdef>
	</glossentry>
	<glossentry id="gls_ftgl"><glossterm>FTGL</glossterm> <acronym>FTGL</acronym>
	    <glossdef> The library of fonts support in GL based solutions. <para>
		    <xref linkend="ref_ftgl_dcm"/> for docs.
	</para></glossdef> </glossentry>
	<glossentry id="gls_glfw"><glossterm>GLFW</glossterm> <acronym>GLFW</acronym>
	    <glossdef> <para>
		Free, Open Source, multi-platform library for OpenGL, OpenGL ES and Vulkan application development.
		It provides a simple, platform-independent API for creating windows, contexts and surfaces, reading input, handling events, etc.
		    <xref linkend="ref_glfw3_dcm"/> for docs.
	</para></glossdef> </glossentry>
	<glossentry id="gls_irm"><glossterm>IRM</glossterm>
	    <glossdef> <para>Interface resolution mechanism, ref <ulink url="../../../grayb/doc/design/index.html"/>
	</para></glossdef> </glossentry>
	<glossentry id="gls_sew"><glossterm>SEW</glossterm> <acronym>SEW</acronym>
	    <glossdef> <para>
		Slot Embeds Widget = approach of assosiating widget to slot in container when
		slots simply embeds widget. Ref
		<xref linkend="ds_wdgs_cnt_wsa"/>.
	    </para> </glossdef>
	</glossentry>
	<glossentry id="gls_slw"><glossterm>SLW</glossterm> <acronym>SLW</acronym>
	    <glossdef> <para>
		Slot Links to Widget = approach of assosiating widget to slot in container when
		slots is connected to widget. Ref
		    <xref linkend="ds_wdgs_cnt_wsa"/>.
	    </para> </glossdef>
	</glossentry>
	<glossentry id="gls_vrc"><glossterm>VRC</glossterm> <acronym>VRC</acronym>
	    <glossdef>
		<para>Visual Representation Controller - agent that managed model representing in visual form.
		    One of key part of <xref linkend="gls_avr"/> architecture.</para> </glossdef>
	</glossentry>
    </glossary>


    <sect1 id="ds_desvrc"><title>DES Visual representation controller (ref <xref linkend="gls_vrc"/>)</title>
	<sect2><title>Intro</title>
	    <sect3><title>Refs</title>
		<itemizedlist>
		    <listitem> <xref linkend="ref_glfw3_dcm"/> - <xref linkend="gls_glfw"/> docs </listitem>
		    <listitem> <xref linkend="ref_ftgl_dcm"/> - <xref linkend="gls_ftgl"/> docs </listitem>
		</itemizedlist>
	    </sect3>
	</sect2>
	<sect2><title>How </title>
	</sect2>
    </sect1>

    <sect1 id="ds_mndrp"><title>MNode detail representation</title>
	<sect2><title>How DRP can be binded to model?</title>
	    <sect3><title>Intro</title>
		<simpara>DRP to model binding is the core part of DRP design. FAP2 approach was to get DRP direct access to the model -
		    DRP just gets from the client URI to the model and get the model MNode iface. Event this particular solution cannot work in FAP3
		    because of restriction to access tree upper layer it is possible to follow the variation of this approach. For instance we can provide
		    DRP with MNode model iface using link or connection with CP providing MNode.</simpara>
		<simpara>However this "Direct access to model" approach has a number of drawbacks. Ref <xref linkend="ds_mndrp_mda"/> for details.</simpara>
	    </sect3>
	    <sect3 id="ds_mndrp_mda"><title>"Direct access to the model" approach</title>
		<sect4 id="ds_mndrp_mda_dbcpifr"><title>Drawback: CP IFR has to be modified </title>
		    <simpara>If we use connection to the model to provide DRP with model MNode iface then we need to modify
			ConnPointu IFR to avoid routing to local ifaces. Including local ifaces to IFR is the mature design solution,
			to IFR modification needs to be very carefully considered.</simpara>
		    <simpara>This drawback can be bypassed with using of some auxiliary interface, MLink for instance.</simpara>
		</sect4>
	    </sect3>
	</sect2>
    </sect1>

    <sect1 id="ds_stl"><title>Widget style</title>
	<sect2><title>Intro</title>
	    <simpara>Style is the set of visialization paremeters (VisPar) common for the number of widgets. It can be global or related to some widgets.</simpara>
	</sect2>
	<sect2><title>Initial design items</title>
	    <itemizedlist>
		<listitem>
		    There are separate Local visualization parameters (LVisPar) of visialization and Style.
		    <para>Local paremeters overrites the corresponding style parameters.</para>
		</listitem>
		<listitem>
		    Native relation MStyleProvider - MStyleConsumer is required to get style and observe it change
		    <para>We need to introduce the ifaces for that connection: MWidget and MWdgComp. 
			MStyleProvider contains method getStylePar() to provide comp with Style paremeter.
			MStyleConsumer contains method onStyleParChange() to handle style change.</para>
		</listitem>
	    </itemizedlist>
	</sect2>
	<sect2><title>VisPar resolution</title>
	    <simpara>The mechanism of Style VisPar resolution parameters can be as following:</simpara>
	    <simpara>Widget method getStylePar provides giver VisPar.
		The method checks if there is local Style VisPar and provide it. If not then
		request owner's MWidget for VisPar and provides it. I.e. the method just "merge" local and upper style par.  </simpara>
	</sect2>
    </sect1>

    <sect1 id="ds_tth"><title>Traceability: To handle</title>
	<sect2><title>Remove widget's states for requisition and allocation</title>
	    <sect3><title>Intro</title>
		<simpara>These states are not needed since introducing widget's embedded states.</simpara>
	    </sect3>
	</sect2>
	<sect2><title>Consider to get rid of scene in visual environment.</title>
	    <simpara>Seems scene plays a little role. Is it needed at all?</simpara>
	</sect2>

</sect1>

</article>
