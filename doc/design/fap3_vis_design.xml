<?xml version="1.0" ?>

<!DOCTYPE article SYSTEM "/usr/share/sgml/docbook/dtd/xml/4.5/docbookx.dtd">


<article status="draft" class="specification"> <title>Enhanced Discrete Events System visualization module ver 3. Design.</title>

    <articleinfo>
	<author><personname><firstname>Yuri</firstname><surname>Borisov</surname></personname>
	    <email>yuri.borisov.v@gmail.com</email></author> 

	<releaseinfo>Ver.0.01 at 11-Dec-2021</releaseinfo>

	<abstract>
	    <simpara>This document collects software desing for Discrete Events System visualization module ver 3.</simpara>
	</abstract>

	<revhistory>
	    <revision> <revnumber>0.01</revnumber> <date>11-Dec-2021</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Initial version</revremark> </revision>
	</revhistory>
    </articleinfo>

    <bibliolist><title>References</title>
	<biblioentry id="ref_glfw3_dcm"> <abbrev>GLFW3_DCM</abbrev>
	    <productname><ulink url="https://www.glfw.org/docs/3.3/index.html"/></productname>
	    <title>GLFW documentation</title> </biblioentry>
	<biblioentry id="ref_ftgl_dcm"> <abbrev>FTGL_DCM</abbrev>
	    <productname><ulink url="http://ftgl.sourceforge.net/docs/html/index.html"/></productname>
	    <title><xref linkend="gls_ftgl"/> documentation</title> </biblioentry>
    </bibliolist>

    <glossary> <title>Glossary</title> 
	<glossentry id="gls_avr"><glossterm>AVR</glossterm>
	    <glossdef>
		<para>Agents Visual Representation, feature of representing some system agents in visual terms,
		    It can be used for applications visualizing the systems, Models studios etc. Ref <xref linkend="ds_avr"/> for details.</para>
	    </glossdef>
	</glossentry>
	<glossentry id="gls_drp"><glossterm>DRP</glossterm>
	    <glossdef>
		<para>Detailing Representation, visual model representing some agent in details.
		    Part of <xref linkend="gls_avr"/> architecture</para>
	    </glossdef>
	</glossentry>
	<glossentry id="gls_crp"><glossterm>CRP</glossterm>
	    <glossdef>
		<para>Compact Representation, visual model representing some agent in compact manner.
		    Usially is applied witin <xref linkend="gls_drp"/>. Part of <xref linkend="gls_avr"/> architecture</para>
	    </glossdef>
	</glossentry>
	<glossentry id="gls_ftgl"><glossterm>FTGL</glossterm> <acronym>FTGL</acronym>
	    <glossdef> The library of fonts support in GL based solutions. <para>
		    <xref linkend="ref_ftgl_dcm"/> for docs.
	</para></glossdef> </glossentry>
	<glossentry id="gls_glfw"><glossterm>GLFW</glossterm> <acronym>GLFW</acronym>
	    <glossdef> <para>
		Free, Open Source, multi-platform library for OpenGL, OpenGL ES and Vulkan application development.
		It provides a simple, platform-independent API for creating windows, contexts and surfaces, reading input, handling events, etc.
		    <xref linkend="ref_glfw3_dcm"/> for docs.
	</para></glossdef> </glossentry>
	<glossentry id="gls_irm"><glossterm>IRM</glossterm>
	    <glossdef> <para>Interface resolution mechanism, ref <ulink url="../../../grayb/doc/design/index.html"/>
	</para></glossdef> </glossentry>
	<glossentry id="gls_sew"><glossterm>SEW</glossterm> <acronym>SEW</acronym>
	    <glossdef> <para>
		Slot Embeds Widget = approach of assosiating widget to slot in container when
		slots simply embeds widget. Ref
		<xref linkend="ds_wdgs_cnt_wsa"/>.
	    </para> </glossdef>
	</glossentry>
	<glossentry id="gls_slw"><glossterm>SLW</glossterm> <acronym>SLW</acronym>
	    <glossdef> <para>
		Slot Links to Widget = approach of assosiating widget to slot in container when
		slots is connected to widget. Ref
		    <xref linkend="ds_wdgs_cnt_wsa"/>.
	    </para> </glossdef>
	</glossentry>
	<glossentry id="gls_vrc"><glossterm>VRC</glossterm> <acronym>VRC</acronym>
	    <glossdef>
		<para>Visual Representation Controller - agent that managed model representing in visual form.
		    One of key part of <xref linkend="gls_avr"/> architecture.</para> </glossdef>
	</glossentry>
    </glossary>

    <sect1 id="ds_wdgs"><title>Widget system</title>
	<sect2><title>Columns view</title>
	    <sect4><title>Intro </title>
		<simpara> This view is the base of main <xref linkend="gls_drp"/>s </simpara>
		<simpara>There are 3 options of the view desing:</simpara>
		<itemizedlist>
		    <listitem>#1 Two-layered container: Horisontal layout of vertical layouts (columns) </listitem>
		    <listitem>
			#2 Single layered container with auxliary colums subsystem
			<para>Column here is not vertical layout but simple DES that just collects the widgets from given column</para>
			<simpara>The colums are organized in form of list</simpara>
			<simpara>The problem with this approach is that currently scene assumes that the scene elems are its direct components.
			    So having "column" subystem causes scene not finding of columns widgets.</simpara>
		    </listitem>
		    <listitem>
			#3 Single layered container without special colums subsystem
			<para>It looks like the option #2 but column doesn't collect the widget but is just "slot".</para>
		    </listitem>
		</itemizedlist>
	    </sect4>
	</sect2>
	<sect2 id="ds_wdgs_i"><title>Issues</title>
	    <sect3 id="ds_wdgs_i_01"><title>Issue [WDGS_I_01] </title>
		<simpara>Currently used container allocation scheme is incorrect - containter allocates AFTER
		    allocation of its components. In this case it almost awlays happens that comps allocation is wider that container allocation during
		    allocation process.</simpara>
	    </sect3>
	</sect2>
    </sect1>

    <sect1 id="ds_stl"><title>Widget style</title>
	<sect2><title>Intro</title>
	    <simpara>Style is the set of visialization paremeters (VisPar) common for the number of widgets. It can be global or related to some widgets.</simpara>
	</sect2>
	<sect2><title>Initial design items</title>
	    <itemizedlist>
		<listitem>
		    There are separate Local visualization parameters (LVisPar) of visialization and Style.
		    <para>Local paremeters overrites the corresponding style parameters.</para>
		</listitem>
		<listitem>
		    Native relation MStyleProvider - MStyleConsumer is required to get style and observe it change
		    <para>We need to introduce the ifaces for that connection: MWidget and MWdgComp. 
			MStyleProvider contains method getStylePar() to provide comp with Style paremeter.
			MStyleConsumer contains method onStyleParChange() to handle style change.</para>
		</listitem>
		<listitem>
		    DES context desing is suitable for style.
		    <para>Ref <ulink url="../../../fap3/doc/design/index.html#ds_dctx"/> </para>
		</listitem>
	    </itemizedlist>
	</sect2>
	<sect2><title>VisPar resolution</title>
	    <simpara>The mechanism of Style VisPar resolution parameters can be as following:</simpara>
	    <simpara>Widget method getStylePar provides giver VisPar.
		The method checks if there is local Style VisPar and provide it. If not then
		request owner's MWidget for VisPar and provides it. I.e. the method just "merge" local and upper style par.  </simpara>
	</sect2>
	<sect2><title>Status: [IN_PROGRESS]</title>
	    <sect3><title>20220213 Interim solution</title>
		<simpara>Very simple interim solution is implemented. The solution is not fully right. The problem is that it doesn't follow DES phylosofy -
		    all data are dependent. So style's visual parameters are treated as simple data, not DES states. So any changes in style doesn't affect 
		    immediatelly the widgets. Solution needs to be redesigned.</simpara>
	    </sect3>
	</sect2>
    </sect1>

    <sect1 id="ds_avr"><title>Agents visual representation (<xref linkend="gls_avr"/>)</title>
	<sect2><title>Intro</title>
	</sect2>
	<sect2 id="ds_desvrc"><title>DES Visual representation controller (ref <xref linkend="gls_vrc"/>)</title>
	    <sect2><title>Intro</title>
		<sect3><title>Refs</title>
		    <itemizedlist>
			<listitem> <xref linkend="ref_glfw3_dcm"/> - <xref linkend="gls_glfw"/> docs </listitem>
			<listitem> <xref linkend="ref_ftgl_dcm"/> - <xref linkend="gls_ftgl"/> docs </listitem>
			<listitem> <xref linkend="ds_vtxdrp"/> for Vertex DRP design.</listitem>
		    </itemizedlist>
		</sect3>
	    </sect2>
	</sect2>
    </sect1>

    <sect1 id="ds_mndrp"><title>MNode detail representation</title>
	<sect2><title>How DRP can be binded to model?</title>
	    <sect3><title>Intro</title>
		<simpara>DRP to model binding is the core part of DRP design. FAP2 approach was to get DRP direct access to the model -
		    DRP just gets from the client URI to the model and get the model MNode iface. Event this particular solution cannot work in FAP3
		    because of restriction to access tree upper layer it is possible to follow the variation of this approach. For instance we can provide
		    DRP with MNode model iface using link or connection with CP providing MNode.</simpara>
		<simpara>However this "Direct access to model" approach has a number of drawbacks. Ref <xref linkend="ds_mndrp_mda"/> for details.</simpara>
	    </sect3>
	    <sect3 id="ds_mndrp_mda"><title>"Direct access to the model" approach</title>
		<sect4 id="ds_mndrp_mda_dbcpifr"><title>Drawback: CP IFR has to be modified </title>
		    <simpara>If we use connection to the model to provide DRP with model MNode iface then we need to modify
			ConnPointu IFR to avoid routing to local ifaces. Including local ifaces to IFR is the mature design solution,
			to IFR modification needs to be very carefully considered.</simpara>
		    <simpara>This drawback can be bypassed with using of some auxiliary interface, MLink for instance.</simpara>
		</sect4>
	    </sect3>
	</sect2>
    </sect1>

    <sect1 id="ds_vtxdrp"><title>Vertex detailed representation</title>
	<sect2><title>Columns container as the base of the representation view.</title>
	    <sect3><title>Intro</title>
		<simpara>It makes sense to keep the base ideas of fap2-vis Vertex DRP where DRP is column view with "tunnels" between the colums.
		    Columns are used to keep CRPs whereas the tunnels are used to show the connections. </simpara>
	    </sect3>
	</sect2>
	<sect2 id="ds_vtxdrp_ord"><title>CRPs ordering.</title>
	    <sect3><title>Intro</title>
		<simpara>DRP important feature is ordering owned CRPs. The ordering allows to minimize the connections representations so makes detailed view more readable.
		    So we need to have CRPs ordiring controller within DRP.</simpara>
		<simpara>The object of ordering shall be CRP slot. This is because CRP slot represents position of CRP in DRP view. DRP changes CRP position basing on data
		    of CRP slot. Each CRP exposes the data of associated represented model (managed model) vertex component. Main data is vertex connections (vertex pairs).</simpara>
		<simpara>So DRP has the "orderer" subsystem that connects to all slots, ref <xref linken="ds_avr_vtxdrp_ord_hoc"/> for details.</simpara>
	    </sect3>
	    <sect3 id="ds_vtxdrp_ord_hoc"><title>How DRP orderer subsystem connects to CRPs?</title>
		<sect4><title>Intro</title>
		    <simpara>We can use DES context for that, especially CRP context, ref <ulink url="../../../fap3/doc/design/index.html#ds_dctx"/>.
			Initially the context was designed for comps connecting to owner common CPs.
			But it can also be used in reverse direction. Look at ut_desctx.cpp:test_des_ctx_4() test - it shows how owner's commn CP can be connected to comps. This design uses
			the connections specific that the func agent S1Add can resolve and iterate even the pairs that are connected indirectly via System1.CtxC.Ctx1.</simpara>
		</sect4>
		<sect4 id="ds_vtxdrp_ord_hoc_dc"><title>How ordering controller needs to deal with CRP? </title>
		    <simpara>The first idea is that the controller needs CRP Id and the list of managed agent connections. With that data it will be able to "calculate" the column suitable for
			CRP. However this scheme of monolitic controller is not right - it will not be able to update the ordering in case of CRP slot re-ordered.
			We need to create correct DES dependancies chain. In the system A~B~C vertex "A" CRP slot position (column atm) depends on positions
			of the slots that are binded to "A" pairs, in our case "B". If slot "B" changes its position it should cause all dependent slots positions update.
			This means that we need to create the "A" slot connections to other slots to establish that dependencies.
			CRP representing. It is still the question is we need slots connections or CRPs connections.</simpara>
		</sect4>
		<sect4><title>CRPs inputs in orderer needs to be serialized.</title>
		    <simpara>This is required because orderer cannot perform DRP mutation simultaneously - this will make the mutation incorrect.
			Input serializer (iterator) system InpItr was added to DesUtils module. Look at ut_desctx.cpp:test_des_ctx_5() test - it shows of how to serialize the inputs.</simpara>
		</sect4>
	    </sect3>
	    <sect3><title>Do we need edge CRP?</title>
		<sect4><title>Intro</title>
		    <simpara>From DRP layouting POV the edge CRPs are required to draw connections. On another hand it could help to establish CRPs (or theirs slots) dependencies as
			discussed in <xref linkend="ds_vtxdrp_ord_hoc_dc"/> - edge CRP can act as mediator between vertex CRPs connecting vertex CRPs connpoints provided CRPs slot position.</simpara>
		</sect4>
	    </sect3>
	</sect2>
    </sect1>

    <sect1 id="ds_tth"><title>Traceability: To handle</title>
	<sect2><title>Remove widget's states for requisition and allocation</title>
	    <sect3><title>Intro</title>
		<simpara>These states are not needed since introducing widget's embedded states.</simpara>
	    </sect3>
	</sect2>
	<sect2><title>Consider to get rid of scene in visual environment.</title>
	    <simpara>Seems scene plays a little role. Is it needed at all?</simpara>
	</sect2>
    </sect1>

</article>
